{"version":3,"sources":["components/TextFilter/TextFilter.js","components/LaunchCard/LaunchCard.js","components/LaunchesContainer/LaunchesContainer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","marginLeft","marginRight","width","TextFilter","props","onChange","label","classes","TextField","type","className","root","margin","flickerImg","height","backgroundSize","missionPatchImg","noLaunchImgAvailable","textAlign","noMissionPatchImgAvailable","LaunchCard","links","mission_name","launch_year","details","Grid","item","sm","xs","Card","flickr_images","length","CardMedia","image","title","Typography","component","CardContent","gutterBottom","variant","mission_patch_small","LaunchesContainer","loadLaunches","params","setState","loading","axios","get","limit","then","result","launches","state","concat","data","offset","catch","error","loadMore","launchFilter","launch","textFilter","toLowerCase","includes","onFilterChange","event","target","value","this","message","layout","container","spacing","filter","map","key","flight_number","Button","disabled","button","onClick","React","Component","withStyles","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAUMA,EAAYC,YAAW,CAC3BC,WAAY,QACZC,YAAa,QACbC,MAAO,MAuBMC,MApBf,SAAoBC,GAAQ,IAClBC,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,MAEZC,EAAUT,IAEhB,OACE,kBAACU,EAAA,EAAD,CACEF,MAAOA,EACPG,KAAK,SACLC,UAAWH,EAAQI,KACnBC,OAAO,SACPP,SAAUA,K,2BChBVP,EAAYC,YAAW,CAC3Bc,WAAY,CACVC,OAAQ,IACRC,eAAgB,UAChBH,OAAQ,SAEVI,gBAAiB,CACfF,OAAQ,IACRC,eAAgB,UAChBH,OAAQ,SAEVK,qBAAsB,CACpBC,UAAW,UAEbC,2BAA4B,CAC1BD,UAAW,YAwDAE,MApDf,SAAoBhB,GAAQ,IAClBiB,EAA8CjB,EAA9CiB,MAAOC,EAAuClB,EAAvCkB,aAAcC,EAAyBnB,EAAzBmB,YAAaC,EAAYpB,EAAZoB,QAEpCjB,EAAUT,IAEhB,OACE,kBAAC2B,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,KACGR,EAAMS,cAAcC,OAAS,EAC5B,kBAACC,EAAA,EAAD,CACEtB,UAAWH,EAAQM,WACnBoB,MAAOZ,EAAMS,cAAc,GAC3BI,MAAM,iBAGR,kBAACC,EAAA,EAAD,CAAYzB,UAAWH,EAAQU,qBAAsBmB,UAAU,KAA/D,6BAIF,kBAACC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CAAYG,cAAY,EAACC,QAAQ,KAAKH,UAAU,MAC7Cd,EADH,MACoBC,GAEpB,kBAACY,EAAA,EAAD,CAAYC,UAAU,KAAKZ,IAEE,OAA9BH,EAAMmB,oBACL,kBAACR,EAAA,EAAD,CACEtB,UAAWH,EAAQS,gBACnBiB,MAAOZ,EAAMmB,oBACbN,MAAM,kBAGR,kBAACC,EAAA,EAAD,CACEzB,UAAWH,EAAQY,2BACnBiB,UAAU,KAFZ,uC,SC7BJK,E,YACJ,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRsC,aAAe,WAAkB,IAAjBC,EAAgB,uDAAP,GACvB,EAAKC,SACH,CACEC,SAAS,IAEX,WACEC,IACGC,IA3CqB,yCA0CxB,aAEIC,MAAO,EAAKA,OACTL,IAEJM,MAAK,SAAAC,GACJ,EAAKN,SAAS,CAEZO,SAAU,EAAKC,MAAMD,SAASE,OAAOH,EAAOI,MAC5CT,SAAS,EAETU,OAAQ,EAAKH,MAAMG,OAAS,EAAKP,WAGpCQ,OAAM,SAAAC,GAAK,OACV,EAAKb,SAAS,CACZa,QACAZ,SAAS,WA3CF,EAkDnBa,SAAW,WACT,EAAKhB,aAAa,CAAEa,OAAQ,EAAKH,MAAMG,OAAS,EAAKP,SAnDpC,EAuDnBW,aAAe,SAAAC,GAAW,IAChBC,EAAe,EAAKT,MAApBS,WAEFrC,EAAuCoC,EAAvCpC,QAASF,EAA8BsC,EAA9BtC,aAAcC,EAAgBqC,EAAhBrC,YAK7B,OAFAC,EAAUA,GAAW,GAGnBF,EAAawC,cAAcC,SAASF,IACpCtC,EAAYwC,SAASF,IACrBrC,EAAQsC,cAAcC,SAASF,IAlEhB,EAsEnBG,eAAiB,SAAAC,GACf,EAAKrB,SAAS,CACZiB,WAAYI,EAAMC,OAAOC,SArE3B,EAAKf,MAAQ,CACXP,SAAS,EACTM,SAAU,GACVM,MAAO,KACPI,WAAY,GACZN,OAAQ,GAKV,EAAKP,MAAQ,EAbI,E,iFAiBjBoB,KAAK1B,iB,+BA2DG,IAAD,EAC8B0B,KAAKhB,MAAlCP,EADD,EACCA,QAASM,EADV,EACUA,SAAUM,EADpB,EACoBA,MACnBlD,EAAY6D,KAAKhE,MAAjBG,QAER,OAAIkD,EACK,kBAACtB,EAAA,EAAD,CAAYC,UAAU,KAAKqB,EAAMY,SAIxC,yBAAK3D,UAAWH,EAAQ+D,QACtB,kBAAC7C,EAAA,EAAD,CAAM8C,WAAS,EAACC,QAAS,GACvB,kBAAC/C,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACZiB,GAAW,kBAAC,IAAD,MACZ,kBAAC,EAAD,CACEvC,MAAM,kBACND,SAAU+D,KAAKJ,kBAIlBb,EAASsB,OAAOL,KAAKT,cAAce,KAAI,SAAAd,GAAM,OAC5C,kBAAC,EAAD,iBAAgBA,EAAhB,CAAwBe,IAAKf,EAAOgB,oBAGtC,kBAACnD,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACb,kBAACiD,EAAA,EAAD,CACEC,SAAUjC,EACVN,QAAQ,WACR7B,UAAWH,EAAQwE,OACnBC,QAASZ,KAAKV,UAJhB,oB,GArGoBuB,IAAMC,WAuHvBC,cApIA,CACbb,OAAQ,CACNpE,MAAO,OACPF,WAAY,QACZC,YAAa,SAEf8E,OAAQ,CACNnE,OAAQ,QA6HGuE,CAAmB1C,GClJnB2C,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,MAAK,SAAAgD,GACjCA,EAAaC,kB","file":"static/js/main.47fdeb02.chunk.js","sourcesContent":["/**\n * Basic material text input field that allows for customisation of\n * label and input change event\n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles({\n  marginLeft: \"2vmin\",\n  marginRight: \"2vmin\",\n  width: 200\n});\n\nfunction TextFilter(props) {\n  const { onChange, label } = props;\n\n  const classes = useStyles();\n\n  return (\n    <TextField\n      label={label}\n      type=\"filter\"\n      className={classes.root}\n      margin=\"normal\"\n      onChange={onChange}\n    />\n  );\n}\nTextFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired\n};\n\nexport default TextFilter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst useStyles = makeStyles({\n  flickerImg: {\n    height: 240,\n    backgroundSize: \"contain\",\n    margin: \"2vmin\"\n  },\n  missionPatchImg: {\n    height: 100,\n    backgroundSize: \"contain\",\n    margin: \"2vmin\"\n  },\n  noLaunchImgAvailable: {\n    textAlign: \"center\"\n  },\n  noMissionPatchImgAvailable: {\n    textAlign: \"center\"\n  }\n});\n\nfunction LaunchCard(props) {\n  const { links, mission_name, launch_year, details } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Grid item sm={4} xs={12}>\n      <Card>\n        {links.flickr_images.length > 0 ? (\n          <CardMedia\n            className={classes.flickerImg}\n            image={links.flickr_images[0]}\n            title=\"Launch Image\"\n          />\n        ) : (\n          <Typography className={classes.noLaunchImgAvailable} component=\"p\">\n            No launch image available\n          </Typography>\n        )}\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {mission_name} - {launch_year}\n          </Typography>\n          <Typography component=\"p\">{details}</Typography>\n        </CardContent>\n        {links.mission_patch_small !== null ? (\n          <CardMedia\n            className={classes.missionPatchImg}\n            image={links.mission_patch_small}\n            title=\"Mission Patch\"\n          />\n        ) : (\n          <Typography\n            className={classes.noMissionPatchImgAvailable}\n            component=\"p\">\n            No mission patch image available\n          </Typography>\n        )}\n      </Card>\n    </Grid>\n  );\n}\nLaunchCard.propTypes = {\n  links: PropTypes.shape({\n    mission_patch_small: PropTypes.string.isRequired,\n    flickr_images: PropTypes.array.isRequired\n  }),\n  mission_name: PropTypes.string.isRequired,\n  launch_year: PropTypes.string.isRequired,\n  details: PropTypes.string\n};\n\nexport default LaunchCard;\n","/**\n * Container, api manager and layout for displaying a list of SpaceX launches\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport axios from \"axios\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport TextFilter from \"components/TextFilter\";\nimport LaunchCard from \"components/LaunchCard/\";\nimport Loading from \"components/Loading\";\n\nconst SPACEWATCH_LAUNCHES_API = \"https://api.spacexdata.com/v3/launches\";\n\nconst styles = {\n  layout: {\n    width: \"auto\",\n    marginLeft: \"2vmin\",\n    marginRight: \"2vmin\"\n  },\n  button: {\n    margin: \"5px\"\n  }\n};\n\n// Write tests, prop types, and document prop types\n// and components\nclass LaunchesContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      launches: [],\n      error: null,\n      textFilter: \"\",\n      offset: 0\n    };\n\n    // Limit launches loaded to 6\n    // This will also indicate \"Load More\" button to load 6 more launches\n    this.limit = 6;\n  }\n\n  componentDidMount() {\n    this.loadLaunches();\n  }\n\n  loadLaunches = (params = {}) => {\n    this.setState(\n      {\n        loading: true\n      },\n      () => {\n        axios\n          .get(SPACEWATCH_LAUNCHES_API, {\n            limit: this.limit,\n            ...params\n          })\n          .then(result => {\n            this.setState({\n              // Append new data onto current data\n              launches: this.state.launches.concat(result.data),\n              loading: false,\n              // Increase offset\n              offset: this.state.offset + this.limit\n            });\n          })\n          .catch(error =>\n            this.setState({\n              error,\n              loading: false\n            })\n          );\n      }\n    );\n  };\n\n  loadMore = () => {\n    this.loadLaunches({ offset: this.state.offset + this.limit });\n  };\n\n  /** Filter launches based on available filters */\n  launchFilter = launch => {\n    const { textFilter } = this.state;\n\n    let { details, mission_name, launch_year } = launch;\n\n    // Default to empty string if null\n    details = details || \"\";\n\n    return (\n      mission_name.toLowerCase().includes(textFilter) ||\n      launch_year.includes(textFilter) ||\n      details.toLowerCase().includes(textFilter)\n    );\n  };\n\n  onFilterChange = event => {\n    this.setState({\n      textFilter: event.target.value\n    });\n  };\n\n  render() {\n    const { loading, launches, error } = this.state;\n    const { classes } = this.props;\n\n    if (error) {\n      return <Typography component=\"p\">{error.message}</Typography>;\n    }\n\n    return (\n      <div className={classes.layout}>\n        <Grid container spacing={4}>\n          <Grid item xs={12}>\n            {loading && <Loading />}\n            <TextFilter\n              label=\"Filter launches\"\n              onChange={this.onFilterChange}\n            />\n          </Grid>\n\n          {launches.filter(this.launchFilter).map(launch => (\n            <LaunchCard {...launch} key={launch.flight_number} />\n          ))}\n\n          <Grid item xs={12}>\n            <Button\n              disabled={loading}\n              variant=\"outlined\"\n              className={classes.button}\n              onClick={this.loadMore}>\n              Load More\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nLaunchesContainer.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(LaunchesContainer);\n","import React from \"react\";\n\nimport LaunchesContainer from \"components/LaunchesContainer\";\n\nconst App = () => <LaunchesContainer />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}