{"version":3,"sources":["Launches.js","App.js","serviceWorker.js","index.js"],"names":["Launches","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","launchFilter","target","value","loadMore","axios","get","limit","state","offset","then","result","data","concat","isLoading","catch","error","_this2","_this$state","classes","react_default","a","createElement","Typography_default","component","message","className","layout","Grid_default","container","spacing","item","xs","TextField_default","id","label","type","filterLaunchField","margin","onChange","filter","launch","l","details","mission_name","toLowerCase","includes","launch_year","map","sm","key","flight_number","Card_default","links","flickr_images","length","CardMedia_default","flickerImg","image","title","noLaunchImgAvailable","CardContent_default","gutterBottom","variant","mission_patch_small","missionPatchImg","noMissionPatchImgAvailable","Button_default","button","onClick","React","Component","withStyles","height","backgroundSize","textAlign","width","marginLeft","marginRight","App","src_Launches","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e01443b6.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst styles = {\n  flickerImg: {\n    height: 240,\n    backgroundSize: \"contain\",\n    margin: \"2vmin\"\n  },\n  missionPatchImg: {\n    height: 100,\n    backgroundSize: \"contain\",\n    margin: \"2vmin\"\n  },\n  noLaunchImgAvailable: {\n  \ttextAlign: \"center\"\n  },\n  noMissionPatchImgAvailable: {\n  \ttextAlign: \"center\"\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: \"2vmin\",\n    marginRight: \"2vmin\",\n  },\n  filterLaunchField: {\n    marginLeft: \"2vmin\",\n    marginRight: \"2vmin\",\n    width: 200,\n  },\n  button: {\n    margin: '5px'\n  }\n};\n\nclass Launches extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      data: null,\n      error: null,\n      launchFilter: \"\",\n      offset: 0,\n    };\n\n    // Limit launches loaded to 6\n    // This will also indicate \"Load More\" button to load 6 more launches\n    this.limit = 6;\n  };\n\n  componentDidMount() {\n    axios.get(\"https://api.spacexdata.com/v3/launches?limit=\"+this.limit)\n      .then(result => {\n      \tthis.setState({\n\t        data: result.data,\n\t        isLoading: false\n\t      })\n      })\n      .catch(error => this.setState({\n        error,\n        isLoading: false\n      }));\n  };\n\n  handleChange = (event) => {\n  \tthis.setState({\n      launchFilter: event.target.value\n    });\n  };\n\n  // Event to load more launches\n  loadMore = () => {\n    axios.get(\"https://api.spacexdata.com/v3/launches?limit=\"+this.limit+\"&offset=\"+(this.state.offset+this.limit))\n      .then(result => {\n        this.setState({\n          // Append new data onto current data\n          data: this.state.data.concat(result.data),\n          isLoading: false,\n          offset: this.state.offset + this.limit,\n        })\n      })\n      .catch(error => this.setState({\n        error,\n        isLoading: false\n      }));\n  };\n\n  render() {\n    const { isLoading, data, error, launchFilter } = this.state;\n    const { classes } = this.props;\n\n    if (error) {\n      return <Typography component=\"p\">{error.message}</Typography>;\n    }\n\n    if (isLoading) {\n      return <Typography component=\"p\">Loading</Typography>;\n    }\n\n    return (\n      <div className={classes.layout}>\n      \t<Grid container spacing={32}>\n      \t\t<Grid item xs={12}>\n      \t\t\t<TextField\n\t\t          id=\"launch-filter\"\n\t\t          label=\"Filter launches\"\n\t\t          type=\"filter\"\n\t\t          className={classes.filterLaunchField}\n\t\t          margin=\"normal\"\n\t\t          onChange={this.handleChange}\n\t\t        />\n      \t\t</Grid>\n\n\n          {data.filter(launch => {\n          \tlet l = launch;\n          \tif(l.details == null){\n          \t\tl.details = \"\";\n          \t}\n          \treturn l.mission_name.toLowerCase().includes(launchFilter) ||\n          \t\tl.launch_year.includes(launchFilter) ||\n    \t\t\tl.details.toLowerCase().includes(launchFilter);\n          })\n          .map(launch =>\n          \t<Grid item sm={4} xs={12} key={launch.flight_number}>\n          \t    <Card>\n          \t    \t{launch.links.flickr_images.length > 0 ? (\n\t\t\t        <CardMedia\n\t\t\t          className={classes.flickerImg}\n\t\t\t          image={launch.links.flickr_images[0]}\n\t\t\t          title=\"Launch Image\"\n\t\t\t        />\n\t\t\t        ) : (\n\t\t        \t\t<Typography className={classes.noLaunchImgAvailable} component=\"p\">\n\t\t\t            \tNo launch image available\n\t\t\t          \t</Typography>\n\t\t\t        )}\n\t\t\t        <CardContent>\n\t\t\t          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t\t            {launch.mission_name} - {launch.launch_year}\n\t\t\t          </Typography>\n\t\t\t          <Typography component=\"p\">\n\t\t\t            {launch.details}\n\t\t\t          </Typography>\n\t\t\t        </CardContent>\n\t\t\t        {launch.links.mission_patch_small != null ? (\n\t\t\t\t        <CardMedia\n\t\t\t\t          className={classes.missionPatchImg}\n\t\t\t\t          image={launch.links.mission_patch_small}\n\t\t\t\t          title=\"Mission Patch\"\n\t\t\t\t        />\n\t\t\t        ) : (\n\t\t\t        \t<Typography className={classes.noMissionPatchImgAvailable} component=\"p\">\n\t\t\t            \tNo mission patch image available\n\t\t\t          \t</Typography>\n\t\t\t        )}\n\t\t        </Card>\n\t        </Grid>\n          )}\n\n          <Grid item xs={12}>\n            <Button variant=\"outlined\" className={classes.button} onClick={this.loadMore}>\n              Load More\n            </Button>\n          </Grid>\n      \t</Grid>\n      </div>\n    );\n  }\n}\n\nLaunches.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Launches);","import React from 'react';\n\nimport Launches from './Launches'\n\nconst App = () =>\n    <Launches />\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}